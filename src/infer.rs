use burn::{
    module::Module,
    record::{
        BinFileRecorder, NoStdTrainingRecorder, CompactRecorder, FullPrecisionSettings, NamedMpkFileRecorder, Recorder,
    },
    tensor::{Distribution, backend::Backend, Bool, Device, ElementConversion, Int, Tensor},
};
use std::env;

use crate::model::{Model, reconstruction_to_image};

pub fn load_model<B: Backend>(device: &B::Device) -> Model<B> {
    let current_dir = env::current_dir().expect("Failed to get current directory");
    let model_dir = current_dir.join("artifacts/");

    // Load model in full precision from MessagePack file
    let model_path = model_dir.join("model.mpk");

    let recorder: NamedMpkFileRecorder<burn::record::HalfPrecisionSettings> = CompactRecorder::new();
    // let recorder = NoStdTrainingRecorder::new();

    let model = Model::new(device);
    let model = model
        .load_file(model_path, &recorder, device)
        .expect("Should be able to load the model weights from the provided file");

    model
}

pub fn infer<B: Backend>(device: &B::Device) {
    let model: Model<B> = load_model(device);

    // let embedding_dim = 256; 
    // let z_mean = Tensor::<B, 1>::from_floats(vec![0.03714832, -0.070195004, -1.5977972, 1.6020486, 1.5155067, 0.3013904, -0.11543693, 0.7429949, 0.7115659, 0.06955137, 0.85217285, 0.68840873, 1.239352, -1.0257564, -0.520441, -1.0102265, 0.18212259, 0.430901, -0.013641795, -1.7757457, 0.8910689, -1.428675, -0.7634896, 0.36045513, 0.34548873, -1.0690928, 0.14966679, -2.1038008, -1.2352626, -0.873523, 0.36172327, -0.39562628, 0.31701994, -1.1625967, 1.007806, -0.081036985, -1.0162781, -0.04766373, -1.2571269, -0.31052288, 0.6986184, -0.6987369, 0.9430338, 1.1643609, -0.29099008, -0.6484282, 2.0972095, -0.45593676, 0.030800423, 0.30276817, -0.22795165, -1.7030346, -0.9927449, -0.14114812, -0.266474, -0.8566758, 0.23279276, 1.3878212, -0.28526917, -0.3660706, -0.2103177, 1.3349125, 1.118349, -0.65283, 0.038788997, 0.0071958206, -2.5524347, -0.5740804, 0.37096518, -0.34070122, -1.2096479, -1.6303234, -0.52451694, -0.061653357, -1.1273232, -1.4269408, -1.3298233, -1.5101249, 1.1166651, 2.2018, 0.37973076, 0.56712174, -0.9489951, 0.2378906, 0.8484596, -1.8843992, 0.60027313, 0.26470548, 0.53042877, 0.4767353, 0.7794986, -0.89933914, 0.16843757, -0.35902393, -0.48362058, 0.32452235, 1.2506061, 0.6823988, -1.2151093, -0.7201106, 0.29307702, 1.2032484, -0.7143719, -0.46209344, -0.044721764, 0.5205836, -1.7047939, -0.76018924, -0.47721428, 1.09981, -0.94294393, 0.72130245, -0.34859437, -0.5548617, 0.48540947, -0.25973624, 0.11589956, 2.3530169, 0.44801992, -1.139173, -0.429419, -0.57097495, -0.038260605, 0.25766954, 1.0195768, -0.5736804, -0.31308028, -0.13014232, 0.8825697, 0.6859813, 0.32510906, -0.5724665, 0.026266735, 0.68048215, -0.13902622, 0.110057645, -2.0641012, 0.23838717, -1.3092642, -0.0175803, -1.1985822, -1.6900591, -0.38016474, -0.95658195, 0.3094951, 0.4445523, 0.16271695, 0.28404605, -1.7602656, -0.28135663, -1.3314638, -1.4308677, 0.024245393, 0.29311454, -1.313585, 1.0577843, -1.1705167, 1.0112288, 0.8539471, -0.16369444, -0.12698874, 2.006907, -0.8247459, -0.6439155, 0.6847062, -2.4200752, 0.09717165, -1.827547, 1.8609283, 0.4932377, -1.7767007, -0.7579527, -1.6428283, -0.82019556, -0.6448218, -0.2413626, 0.10388386, -1.0320148, -0.035060726, -0.20299473, 1.3444681, -0.01770715, -0.6141963, -0.5377198, 0.59984213, 0.633814, -1.1599865, -0.43095636, 0.24060488, -0.27172622, -1.1130347, -0.24259415, -0.014707039, -0.0069701476, -0.14034495, 1.2336546, -2.1260004, 2.325148, 0.09615576, 1.1323996, 0.0534815, 0.016095832, 0.4207873, -1.1165494, 0.049583435, -0.42551827, -0.19508004, 0.09857331, -1.310881, -0.44018835, 0.02005442, -1.3265514, -1.3869809, -0.06678431, -0.7073442, -0.5036218, -0.5399185, 0.5542944, 0.47604167, 0.64640427, -0.3578555, -0.46288514, -0.044028997, 0.9406681, -0.099618, 0.59206146, -0.9652095, -0.62229985, 0.47843808, 0.16916019, 0.42615804, -0.31206223, 0.0624247, -0.83949155, -0.55576944, 2.1772892, 1.1180325, -1.3507812, -0.7008178, 0.69735086, -0.8857297, 1.5604104, -1.618084, 1.7171695, -0.011062821, -0.7518023, 0.16979006, -0.2528146, -1.4204645, 0.4162137, -1.3861927, 0.14862697, 0.5432736, 0.967579, 0.06999111, 1.156359].as_slice(), &device).unsqueeze_dim(0);
    // let z_var = Tensor::<B, 1>::from_floats(vec![-5.810959, -5.761531, -5.7150745, -5.664096, -6.091882, -6.3907523, -5.8918495, -6.0395236, -5.454391, -6.050583, -5.9696097, -5.880445, -6.096672, -5.5190763, -6.052905, -6.0906286, -5.8512316, -5.4595313, -6.10001, -5.6551943, -5.8399115, -5.9889574, -5.907816, -6.0975657, -5.996319, -6.341633, -5.8601203, -6.6788993, -6.381015, -6.203575, -5.9818354, -5.7806487, -5.6791053, -6.3055296, -5.629436, -6.013553, -5.5578837, -6.1388507, -6.2139616, -6.1539855, -5.8044257, -5.7634163, -6.0077257, -6.0159864, -6.0223246, -6.071806, -6.139915, -5.637664, -5.9729576, -5.444318, -5.926813, -5.663627, -6.112664, -5.554077, -5.718561, -6.1217012, -5.669634, -5.655177, -6.707056, -5.6960597, -6.128923, -6.5264463, -5.6143546, -6.0981917, -6.0440903, -5.818599, -7.0840263, -6.000976, -5.6446066, -5.6271505, -5.681081, -5.887504, -5.841708, -5.846368, -5.9237285, -5.753935, -6.1056623, -6.4411197, -5.9796863, -6.8139944, -5.7385244, -5.3599854, -5.72196, -6.2018294, -6.294812, -6.9849486, -6.07187, -5.696433, -5.884784, -6.0131645, -6.321966, -5.6777067, -6.302873, -5.8649063, -6.434001, -5.800269, -5.6734533, -5.949538, -5.8528266, -5.7095656, -5.9191504, -6.3393226, -5.6634727, -5.594682, -5.6225696, -5.5665145, -5.8947845, -5.6336584, -6.012483, -5.8209, -5.916399, -6.05145, -5.481529, -6.001365, -5.60766, -6.149961, -5.9431834, -6.19671, -6.1673617, -5.982429, -5.178192, -5.892652, -6.233242, -5.762872, -5.6518745, -5.802227, -5.6028814, -5.7241645, -6.106559, -6.0802746, -6.0202036, -5.6095953, -6.203733, -5.8295875, -5.7392855, -5.6897087, -5.924446, -5.97525, -5.9082565, -5.6619086, -5.7541847, -5.6969504, -5.93237, -5.993164, -5.8782363, -5.906991, -5.746581, -5.747913, -6.859167, -5.9267044, -6.238908, -6.245124, -6.400596, -5.977064, -5.8505163, -5.769495, -5.4886985, -5.68814, -6.311818, -5.7903037, -5.692668, -5.6443176, -5.8895335, -5.898753, -5.817812, -5.8939166, -5.966556, -6.127926, -6.2256355, -5.8148584, -5.5772147, -5.343173, -6.209584, -5.97413, -6.207328, -6.198194, -5.903831, -5.9891577, -5.7764845, -5.7251472, -6.400715, -5.7594385, -5.8474307, -5.722534, -5.5963144, -5.8501663, -5.889322, -6.286787, -5.553697, -6.374977, -5.7868376, -5.796993, -5.7847877, -5.875601, -5.883094, -5.6938353, -5.947399, -5.797256, -5.7525573, -6.173055, -5.902069, -5.8690777, -5.9931865, -5.585581, -6.2422194, -6.028308, -5.749899, -5.4642787, -6.008768, -5.986755, -6.2801986, -5.775717, -5.894878, -5.8298836, -5.7227554, -6.1165457, -6.1178217, -5.613937, -5.786973, -5.8471866, -5.8139544, -6.351888, -5.939691, -6.5996246, -6.2052565, -5.671917, -5.710996, -5.7772417, -5.9647856, -5.3876753, -5.5632873, -6.06212, -6.0246468, -5.3493056, -5.8207984, -6.6147895, -5.993144, -6.1388106, -5.6657443, -5.509544, -5.7890234, -6.4200954, -5.402583, -5.9766674, -5.5442686, -6.129007, -5.8124194, -6.004117, -5.446949, -5.433154, -5.805841, -5.9928207, -6.016262, -6.118976, -5.667224, -5.95096].as_slice(), &device).unsqueeze_dim(0);
    // let image = model.infer(z_mean, z_var);

    let embedding_dim = 256; 
    let z = Tensor::random(
        [1, embedding_dim],
        Distribution::Normal(-1., 1.),
        device,
    );
    let image = model.decoder.forward(z.clone());

    let file_name = format!("./images/result.png");
    reconstruction_to_image(image, file_name); 
}
